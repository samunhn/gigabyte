#include <xmotion.h>

int Start = 10;

int QTI[] = {A2, A1};
int QTIvalue[] = {0, 0}; //0 = black, 1 = white

#define lineThreshhold 150

int IR[] = {0, 2, 1};
int IRvalue[] = {0, 0, 0}; //might be 00001 or MOTORPOWER00 since the robots start next to each other
int LastValue = 0;

long currentTime;
long TOL = 0; //TimeOfLastLineDetection
long TSL; //TimeSinceLastLineDetection (currently not used)
#define timeBetweenLineRecognition 250
bool timePassed = true; //has the timeBetweenLineRecognition passed since last line was detected?

#define left_line_sensor A2
#define right_line_sensor A1

#define LeftSensor 0
#define MiddleSensor 2
#define RightSensor 1

#define MOTORPOWER 80

String space = " ";

void setup() {
   Serial.begin(9600);
   pinMode(A2,INPUT);pinMode(A1,INPUT); //QTI pins
   pinMode(0, INPUT);pinMode(2, INPUT);pinMode(1, INPUT);//IR pins
   Serial.println("IR Sensor Test:");
   Serial.println("Left: D0, Middle: D2, Right: D1");
}



void loop() {
  while (digitalRead(Start) == 0) // Button push is waited. When Button is pushed, it gives 1 value.
  {
    xmotion.UserLed2(80); // Blink User Led 2 80ms
  }
  xmotion.CounterLeds(980, 5); //4900ms timer
  while (true){
  currentTime = millis();
  QTICheck();
  IRCheck();
//  xmotion.Forward(30,200);
//  xmotion.Backward(MOTORPOWER,30);
//  xmotion.Right0(MOTORPOWER,190);xmotion.Left0(MOTORPOWER,20);
//  xmotion.StopMotors(MOTORPOWER00);
  Serial.println(QTIvalue[0] + space + QTIvalue[1]);
  EdgeDetected();
  Movement(QTIvalue[0],QTIvalue[1]);
  if (QTIvalue[0] == 0 && QTIvalue[1] == 0){
    //xmotion.Forward(30,1);
    OpponentTracking(IRvalue[0], IRvalue[1], IRvalue[2]);
 }
  }
}



void QTICheck(){
  for (int i = 0; i < 2; i++){
    if ((analogRead(QTI[i])) <= lineThreshhold){
      QTIvalue[i] = 1;
      //Serial.print(analogRead(QTI[i])); //gives its raw data
    } else {
      QTIvalue[i] = 0;
    }
    //Serial.print(i);
  }
}

//bool EdgeDetected(){
//  if ((QTIvalue[0] == 1)||(QTIvalue[1] == 1)||(QTIvalue[2] == 1)){ 
//    TOL = millis();
//    xmotion.Backward(MOTORPOWER,30);
//    return true;
//  } else {
//    return false;
//  }
//}

void EdgeDetected(){
  if ((QTIvalue[0] == 1)||(QTIvalue[1] == 1)){ 
    TOL = millis();
    xmotion.Backward(MOTORPOWER,90);
  }
}


void Movement(int left_line_sensor, int right_line_sensor){
  if (timePassed == true){
    if ((left_line_sensor == 1) && (right_line_sensor == 1)){
      xmotion.Backward(MOTORPOWER,MOTORPOWER);xmotion.Forward(20,20);
      xmotion.Right0(MOTORPOWER,140);xmotion.Left0(20,10); //does an approx. 180 degrees
    }
    else if ((left_line_sensor == 1) && (right_line_sensor == 0)){
      xmotion.Right0(MOTORPOWER,170);xmotion.Left0(MOTORPOWER,20);
    }
    else if ((left_line_sensor == 0) && (right_line_sensor == 1)){
      xmotion.Left0(MOTORPOWER,170);xmotion.Right0(MOTORPOWER,20);
    }
    else if ((left_line_sensor == 0) && (right_line_sensor == 0)){
      xmotion.Backward(MOTORPOWER,MOTORPOWER);xmotion.Forward(MOTORPOWER,20);
      xmotion.Right0(MOTORPOWER,140);
    }
    xmotion.StopMotors(1);
    timePassed = false;
  }
  else if (currentTime - TOL >= timeBetweenLineRecognition){
    timePassed = true;
  }
}

void IRCheck(){
  for (int i = 0; i < 3; i++){
    IRvalue[i] = digitalRead(IR[i]);
    }
}

void OpponentTracking(int LEFT, int MIDDLE, int RIGHT){
    if (MIDDLE == 1 ) //Middle Sensor see the opponent (0 Not Seen, 1 Seen)
    {
      xmotion.Forward(MOTORPOWER, 2); // Both Motors Forward %MOTORPOWER Speed, 1 Milliseconds
      LastValue = 0;
    }
    else if (RIGHT == 1) //Right Sensor see the opponent
    {
      xmotion.Right0(70, 5); // Right Turn %70 Power 1 Milliseconds
      LastValue = 1;
    }
    else if (LEFT == 1) //Left Sensor see the opponent
    {
      xmotion.Left0(70, 5); // Left Turn %70 Power 1 Milliseconds
      LastValue = 2;
    }
}
